<!-- SCATTER CSS -->
<style type="text/css">
    .axis path,
    .axis line {
        fill: none;
        stroke: #ddd;
        shape-rendering: crispEdges;
    }
    
    .dot {
        fill-opacity: 0.9;
    }
    
    .tooltip {
        position: absolute;
        width: 200px;
        height: 28px;
        pointer-events: none;
    }
</style>

<div class="container scatterplot" style="display:none;">
    <form>
        <div>
            <div class="btn-group">
                <a class="btn dropdown-toggle btn-select" data-toggle="dropdown" href="#">familyScore<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <% for(var i=0; i<columns.length; i++) {%>
                        <li role="presentation"><a role="xKey" tabindex=<%i%> href="#"><%= columns[i] %></a></li>
                        <% } %>
                </ul>
            </div>

            <div class="btn-group">
                <a class="btn dropdown-toggle btn-select2" data-toggle="dropdown" href="#">badAssScore<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <% for(var i=0; i<columns.length; i++) {%>
                        <li role="presentation"><a role="yKey" tabindex=<%i%> href="#"><%= columns[i] %></a></li>
                        <% } %>
                </ul>
            </div>

            <div class="btn-group">
                <a class="btn dropdown-toggle btn-select2" data-toggle="dropdown" href="#">averageScore<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <% for(var i=0; i<columns.length; i++) {%>
                        <li role="presentation"><a role="cKey" tabindex=<%i%> href="#"><%= columns[i] %></a></li>
                        <% } %>
                </ul>
            </div>

            <div class="btn-group">
                <button type="button" id="renderScatter" class="btn btn-primary">Draw !</button>
            </div>
        </div>
    </form>

    <!-- Js -->
    <script type="text/javascript">
        var xKey = "familyScore";
        var yKey = "badAssScore";
        var cKey = "averageScore";

        function render() {
            var margin = {
                    top: 20,
                    right: 20,
                    bottom: 30,
                    left: 40
                },
                width = 960 - margin.left - margin.right,
                height = 500 - margin.top - margin.bottom;

            // setup x
            var xValue = function(d) {
                    // if(xKey === "G2"){
                    //   return (d["G3"]*0.3 + d["G2"]*0.2 +d["G1"]*0.2)/0.7;
                    // }
                    return d[xKey];
                }, // data -> value
                xScale = d3.scale.linear().range([0, width]), // value -> display
                xMap = function(d) {
                    return xScale(xValue(d));
                }, // data -> display
                xAxis = d3.svg.axis().scale(xScale).orient("bottom");

            // setup y
            var yValue = function(d) {
                    // if(yKey === "G3"){
                    //   return (d["G3"]*0.3 + d["G2"]*0.2 +d["G1"]*0.2)/0.7;
                    // }
                    return d[yKey];
                }, // data -> value
                yScale = d3.scale.linear().range([height, 0]), // value -> display
                yMap = function(d) {
                    return yScale(yValue(d));
                }, // data -> display
                yAxis = d3.svg.axis().scale(yScale).orient("left");

            // setup fill color
            var cValue = function(d) {
                    if (cKey === "G3" || cKey === "G2" || cKey === "G1" || cKey === "averageScore") {
                        if (d[cKey] >= 16)
                            return "A"
                        else if (d[cKey] >= 14)
                            return "B"
                        else if (d[cKey] >= 12)
                            return "C"
                        else if (d[cKey] >= 10)
                            return "D"
                        else
                            return "F";
                    }
                    return d[cKey];;
                },
                color = d3.scale.category10();

            // add the graph canvas to the body of the webpage
            var svg = d3.select(".scatterplot").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            // add the tooltip area to the webpage
            var tooltip = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);

            d3.json(course, function(data) {
                var dataset = data;
                xScale.domain([d3.min(data, xValue) - 1, d3.max(data, xValue) + 1]);
                yScale.domain([d3.min(data, yValue) - 1, d3.max(data, yValue) + 1]);

                // x-axis
                svg.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + height + ")")
                    .call(xAxis)
                    .append("text")
                    .attr("class", "label")
                    .attr("x", width)
                    .attr("y", -6)
                    .style("text-anchor", "end")
                    .text(xKey);

                // y-axis
                svg.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("class", "label")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text(yKey);

                // draw dots
                svg.selectAll(".dot")
                    .data(data)
                    .enter().append("circle")
                    .attr("class", "dot")
                    .attr("r", 3.5)
                    .attr("cx", xMap)
                    .attr("cy", yMap)
                    .style("fill", function(d) {
                        return color(cValue(d));
                    })
                    .on("mouseover", function(d) {
                        tooltip.transition()
                            .duration(100)
                            .style("opacity", .9);
                        tooltip.html("Group (" + xKey + ", " + yKey + ")" + "<br/> " + cValue(d) + " (" + xValue(d) + ", " + yValue(d) + ")")
                            .style("left", (d3.event.pageX + 5) + "px")
                            .style("top", (d3.event.pageY - 48) + "px");
                    })
                    .on("mouseout", function(d) {
                        tooltip.transition()
                            .duration(300)
                            .style("opacity", 0);
                    });

                // draw legend
                var legend = svg.selectAll(".legend")
                    .data(color.domain())
                    .enter().append("g")
                    .attr("class", "legend")
                    .attr("transform", function(d, i) {
                        return "translate(0," + i * 20 + ")";
                    });

                // draw legend colored rectangles
                legend.append("rect")
                    .attr("x", width - 18)
                    .attr("width", 18)
                    .attr("height", 18)
                    .style("fill", color)
                    .on("mouseover", function(d) {

                        svg.selectAll(".dot")
                            .transition()
                            .duration(400)
                            .style("opacity", function(f) {
                                if (cValue(f) !== d) {
                                    return 0.01;
                                } else return 1;

                            });
                    })
                    .on("mouseout", function(d) {
                        svg.selectAll(".dot")
                            .transition()
                            .duration(400)
                            .style("opacity", function(d) {
                                return 0.9;
                            });
                    });;

                // draw legend text
                legend.append("text")
                    .attr("x", width - 24)
                    .attr("y", 9)
                    .attr("dy", ".35em")
                    .style("text-anchor", "end")
                    .text(function(d) {
                        return d;
                    })
            });

        }

        render();

        $(document).ready(function() {
            $(".dropdown-menu li a").click(function(ev) {
                var selText = $(this).text();
                $(this).parents('.btn-group').find('.dropdown-toggle').html(selText + ' <span class="caret"></span>');
                switch (ev.target.getAttribute("role")) {

                    case "xKey":
                        xKey = ev.target.innerHTML;
                        break;
                    case "yKey":
                        yKey = ev.target.innerHTML;
                        break;
                    case "cKey":
                        cKey = ev.target.innerHTML;
                        break;
                }

            });

            $("#renderScatter").click(function() {
                $(".scatterplot svg").remove();
                render();
            });

        });
    </script>
</div>