<!-- MATRIX CSS -->
<style type="text/css">
    .frame {
        shape-rendering: crispEdges;
    }
    
    .frame {
        fill: none;
        stroke: #aaa;
    }
    
    circle {
        fill-opacity: .24;
    }
    
    circle.hidden {
        fill: #ccc !important;
    }
    
    .extent {
        fill: #000;
        fill-opacity: .125;
        stroke: #fff;
    }
</style>


<div class="container scatterplotmatrix" style="display:none;">
    <script type="text/javascript">
        //defaults
        var firstKey = "G3";
        var secondKey = "G2";
        var thirdKey = "G1";
        var groupKey = "romantic";
        var legendData = [];


        function renderMatrix() {
            var width = 1024,
                size = 200,
                padding = 15;

            var x = d3.scale.linear()
                .range([padding / 2, size - padding / 2]);

            var y = d3.scale.linear()
                .range([size - padding / 2, padding / 2]);

            var xAxis = d3.svg.axis()
                .scale(x)
                .orient("bottom")
                .ticks(5);

            var yAxis = d3.svg.axis()
                .scale(y)
                .orient("left")
                .ticks(5);

            var color = d3.scale.category10();

            d3.json(course, function(error, data) {
                var domainByTrait = {},
                    traits = [firstKey, secondKey, thirdKey],
                    n = traits.length;

                traits.forEach(function(trait) {
                    domainByTrait[trait] = d3.extent(data, function(d) {
                        return d[trait];
                    });
                });

                xAxis.tickSize(size * n);
                yAxis.tickSize(-size * n);

                var brush = d3.svg.brush()
                    .x(x)
                    .y(y)
                    .on("brushstart", brushstart)
                    .on("brush", brushmove)
                    .on("brushend", brushend);

                var svg = d3.select(".scatterplotmatrix").append("svg")
                    .attr("width", size * n + padding)
                    .attr("height", size * n + padding)
                    .append("g")
                    .attr("transform", "translate(" + padding + "," + padding / 2 + ")");

                svg.selectAll(".x.axis")
                    .data(traits)
                    .enter().append("g")
                    .attr("class", "x axis")
                    .attr("transform", function(d, i) {
                        return "translate(" + (n - i - 1) * size + ", -7)";
                    })
                    .each(function(d) {
                        x.domain(domainByTrait[d]);
                        d3.select(this).call(xAxis);
                    });

                svg.selectAll(".y.axis")
                    .data(traits)
                    .enter().append("g")
                    .attr("class", "y axis")
                    .attr("transform", function(d, i) {
                        return "translate(7," + i * size + ")";
                    })
                    .each(function(d) {
                        y.domain(domainByTrait[d]);
                        d3.select(this).call(yAxis);
                    });

                var cell = svg.selectAll(".cell")
                    .data(cross(traits, traits))
                    .enter().append("g")
                    .attr("class", "cell")
                    .attr("transform", function(d) {
                        return "translate(" + (n - d.i - 1) * size + "," + d.j * size + ")";
                    })
                    .each(plot);

                // Titles for the diagonal.
                cell.filter(function(d) {
                        return d.i === d.j;
                    }).append("text")
                    .attr("x", padding)
                    .attr("y", padding)
                    .attr("dy", ".71em")
                    .text(function(d) {
                        return d.x;
                    });

                cell.call(brush);

                function plot(p) {
                    var cell = d3.select(this);

                    x.domain(domainByTrait[p.x]);
                    y.domain(domainByTrait[p.y]);

                    cell.append("rect")
                        .attr("class", "frame")
                        .attr("x", padding / 2)
                        .attr("y", padding / 2)
                        .attr("width", size - padding)
                        .attr("height", size - padding);

                    cell.selectAll("circle")
                        .data(data)
                        .enter().append("circle")
                        .attr("cx", function(d) {
                            return x(d[p.x]);
                        })
                        .attr("cy", function(d) {
                            return y(d[p.y]);
                        })
                        .attr("r", 3)
                        .style("fill", function(d) {
                            if (groupKey === "G3" || groupKey === "G2" || groupKey === "G1") {
                                if (d[groupKey] >= 16)
                                    return color("A")
                                else if (d[groupKey] >= 14)
                                    return color("B")
                                else if (d[groupKey] >= 12)
                                    return color("C")
                                else if (d[groupKey] >= 10)
                                    return color("D")
                                else
                                    return color("F")
                            }
                            return color(d[groupKey]);

                        });
                }

                var brushCell;

                // Clear the previously-active brush, if any.
                function brushstart(p) {
                    if (brushCell !== this) {
                        d3.select(brushCell).call(brush.clear());
                        x.domain(domainByTrait[p.x]);
                        y.domain(domainByTrait[p.y]);
                        brushCell = this;
                    }
                }

                // Highlight the selected circles.
                function brushmove(p) {
                    var e = brush.extent();
                    svg.selectAll("circle").classed("hidden", function(d) {
                        return e[0][0] > d[p.x] || d[p.x] > e[1][0] || e[0][1] > d[p.y] || d[p.y] > e[1][1];
                    });
                }

                // If the brush is empty, select all circles.
                function brushend() {
                    if (brush.empty()) svg.selectAll(".hidden").classed("hidden", false);
                }

                function cross(a, b) {
                    var c = [],
                        n = a.length,
                        m = b.length,
                        i, j;
                    for (i = -1; ++i < n;)
                        for (j = -1; ++j < m;) c.push({
                            x: a[i],
                            i: i,
                            y: b[j],
                            j: j
                        });
                    return c;
                }

                d3.select(self.frameElement).style("height", size * n + padding + 20 + "px");

            });

        }

        renderMatrix();

        $(document).ready(function() {

            $(".dropdown-menu li a").click(function(ev) {
                var selText = $(this).text();
                $(this).parents('.btn-group').find('.dropdown-toggle').html(selText + ' <span class="caret"></span>');
                switch (ev.target.getAttribute("role")) {
                    case "firstKey":
                        firstKey = ev.target.innerHTML;
                        break;
                    case "secondKey":
                        secondKey = ev.target.innerHTML;
                        break;
                    case "thirdKey":
                        thirdKey = ev.target.innerHTML;
                        break;
                    case "groupKey":
                        groupKey = ev.target.innerHTML;
                        break;
                }
            });

            $("#renderMatrix").click(function() {
                $(".scatterplotmatrix svg").remove();

                renderMatrix();
            });

        });
    </script>

    <!-- Search box Start -->
    <form>
        <div class="carousel-search hidden-phone">
            <div class="btn-group">
                <a class="btn dropdown-toggle btn-select1" data-toggle="dropdown" href="#">G3<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <% for(var i=0; i<columns.length; i++) {%>
                        <li role="presentation"><a role="firstKey" tabindex=<%i%> href="#"><%= columns[i] %></a></li>
                        <% } %>
                </ul>
            </div>

            <div class="btn-group">
                <a class="btn dropdown-toggle btn-select2" data-toggle="dropdown" href="#">G2<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <% for(var i=0; i<columns.length; i++) {%>
                        <li role="presentation">
                            <a role="secondKey" tabindex="-1" href="#">
                                <%=columns[i] %>
                            </a>
                        </li>
                        <% } %>
                </ul>
            </div>

            <div class="btn-group">
                <a class="btn dropdown-toggle btn-select3" data-toggle="dropdown" href="#">G1<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <% for(var i=0; i<columns.length; i++) {%>
                        <li role="presentation">
                            <a role="thirdKey" tabindex="-1" href="#">
                                <%=columns[i] %>
                            </a>
                        </li>
                        <% } %>
                </ul>
            </div>

            <div class="btn-group">
                <a class="btn dropdown-toggle btn-select4" data-toggle="dropdown" href="#">romantic<span class="caret"></span></a>
                <ul class="dropdown-menu">
                    <% for(var i=0; i<columns.length; i++) {%>
                        <li role="presentation">
                            <a role="groupKey" tabindex="-1" href="#">
                                <%=columns[i] %>
                            </a>
                        </li>
                        <% } %>

                </ul>
            </div>

            <div class="btn-group">
                <button type="button" id="renderMatrix" class="btn btn-primary">Draw !</button>
            </div>
        </div>
        <br>
    </form>

</div>